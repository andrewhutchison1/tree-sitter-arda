===
pat.ident
===
if a ?= 4 then true end;

fun (a, b, c)
    false
end
---
(chunk
    (if_expression
        cond: (test_expression L: (identifier) R: (int_literal))
        then: (bool_literal))
        
    (fun_expression
        (positional_params (identifier) (identifier) (identifier))
        body: (bool_literal)))

===
pat.pin
===
if ^a ?= 4 then true end;

fun (^a, ^b, ^c) true end
---
(chunk
    (if_expression
        cond: (test_expression L: (pin_pattern) R: (int_literal))
        then: (bool_literal))
    (fun_expression
        (positional_params (pin_pattern) (pin_pattern) (pin_pattern))
        body: (bool_literal)))

===
pat.tuple
===
if (a, b)       ?= test then true end;
if (...a)       ?= test then true end;
if (...)        ?= test then true end;
if (a, ...b)    ?= test then true end;
if (a, (b, c))  ?= test then true end;
if (a, (^b, c)) ?= test then true end;
---
(chunk
    (if_expression
        cond: (test_expression
            L: (tuple_pattern (identifier) (identifier))
            R: (identifier))
        then: (bool_literal))

    (if_expression
        cond: (test_expression
            L: (tuple_pattern (gather_pattern (identifier)))
            R: (identifier))
        then: (bool_literal))

    (if_expression
        cond: (test_expression
            L: (tuple_pattern (gather_pattern))
            R: (identifier))
        then: (bool_literal))

    (if_expression
        cond: (test_expression
            L: (tuple_pattern (identifier) (gather_pattern (identifier)))
            R: (identifier))
        then: (bool_literal))
        
    (if_expression
        cond: (test_expression
            L: (tuple_pattern (identifier) (tuple_pattern (identifier) (identifier)))
            R: (identifier))
        then: (bool_literal))
        
    (if_expression
        cond: (test_expression
            L: (tuple_pattern (identifier) (tuple_pattern (pin_pattern) (identifier)))
            R: (identifier))
        then: (bool_literal)))
===
pat.record
===
if {a, b} ?= test then
    true
end;

if {a=x, b=y} ?= {a=0, b=1} then
    x + y
end
---
(chunk
    (if_expression
        cond: (test_expression
            L: (record_pattern
                (key_pattern (identifier))
                (key_pattern (identifier)))
            R: (identifier))
        then: (bool_literal))
    (if_expression
        cond: (test_expression
            L: (record_pattern
                (pair_pattern (identifier) (identifier))
                (pair_pattern (identifier) (identifier)))
            R: (record_literal
                (pair (identifier) (int_literal))
                (pair (identifier) (int_literal))))
        then: (add_expression
            L: (identifier)
            R: (identifier))))

===
pat.alt
===
match e cases
    0 | 1 => true;
end;

fun f(x, 0|1|2; base=:bin|:dec)
    false
end;
---
(chunk
    (match_expression
        cond: (identifier)
        (case_match
            patn: (alt_pattern L: (int_literal) R: (int_literal))
            body: (bool_literal)))
    
    (fun_expression
        name: (identifier)
        (positional_params
            (identifier)
            (alt_pattern
                L: (int_literal)
                R: (alt_pattern L: (int_literal) R: (int_literal))))
        (keyword_params
            (pair_pattern (identifier) (alt_pattern L: (sym_literal) R: (sym_literal))))
        body: (bool_literal)))

===
pat.capture
===
x @ {a, b, c?} := {a=0, b=1};

match e cases
    x @ 0   => true;
    y @ (0|1) => 1;
    x @ (y @ 0|1, z @ 2|3) => :ok;
end
---
(chunk
    (define_expression
        L: (capture_pattern
            L: (identifier)
            R: (record_pattern
                (key_pattern (identifier))
                (key_pattern (identifier))
                (key_pattern (opt_pattern (identifier)))))
        R: (record_literal
            (pair (identifier) (int_literal))
            (pair (identifier) (int_literal))))

    (match_expression
        cond: (identifier)
        (case_match
            patn: (capture_pattern L: (identifier) R: (int_literal))
            body: (bool_literal))
        (case_match
            patn: (capture_pattern
                L: (identifier)
                R: (alt_pattern L: (int_literal) R: (int_literal)))
            body: (int_literal))
        (case_match
            patn: (capture_pattern
                L: (identifier)
                R: (tuple_pattern
                    (capture_pattern
                        L: (identifier)
                        R: (alt_pattern L: (int_literal) R: (int_literal)))
                    (capture_pattern
                        L: (identifier)
                        R: (alt_pattern L: (int_literal) R: (int_literal)))))
            body: (sym_literal))))

===
pat.guard
===
match e cases
    _ when false => 0;
    a @ (x, y) when x + y > 0 => 1;

    (x when x > 0, y when y > 0) when x == y => 1;
end
---
(chunk
    (match_expression
        cond: (identifier)
        (case_match
            patn: (guard_pattern L: (ignore_pattern) R: (bool_literal))
            body: (int_literal))
        (case_match
            patn: (guard_pattern
                L: (capture_pattern
                    L: (identifier)
                    R: (tuple_pattern (identifier) (identifier)))
                R: (gt_expression
                    L: (add_expression L: (identifier) R: (identifier))
                    R: (int_literal)))
            body: (int_literal))
            
        (case_match
            patn: (guard_pattern
                L: (tuple_pattern
                    (guard_pattern
                        L: (identifier)
                        R: (gt_expression L: (identifier) R: (int_literal)))
                    (guard_pattern
                        L: (identifier)
                        R: (gt_expression L: (identifier) R: (int_literal))))
                R: (eq_expression L: (identifier) R: (identifier)))
            body: (int_literal))))

===
pat.pred
===
fun cases
    (x :: P, y :: Q) => true;
    _ => false;
end;

fun cases
    (x :: P | y :: Q) => true;
    _ => false;
end;

fun cases
    (...(x :: P)) => false;
end;
---
(chunk
    (fun_expression
        (case_fun
            (positional_params
                (predicate_pattern L: (identifier) R: (identifier))
                (predicate_pattern L: (identifier) R: (identifier)))
            body: (bool_literal))
        (case_else body: (bool_literal)))
        
    (fun_expression
        (case_fun
            (positional_params
                (alt_pattern
                    L: (predicate_pattern L: (identifier) R: (identifier))
                    R: (predicate_pattern L: (identifier) R: (identifier))))
            body: (bool_literal))
        (case_else body: (bool_literal)))
        
    (fun_expression
        (case_fun
            (positional_params
                (gather_pattern (predicate_pattern
                    L: (identifier)
                    R: (identifier))))
            body: (bool_literal))))