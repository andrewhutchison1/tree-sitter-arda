===
pat.ident
===
if a ?= 4 then true end;

fun (a, b, c)
    false
end
---
(chunk
    (if_expression
        cond: (test_expression L: (identifier) R: (int_literal))
        then: (bool_literal))
        
    (fun_expression
        (positional_params (identifier) (identifier) (identifier))
        body: (bool_literal)))

===
pat.pin
===
if ^a ?= 4 then true end;

fun (^a, ^b, ^c) true end
---
(chunk
    (if_expression
        cond: (test_expression L: (pin_pattern) R: (int_literal))
        then: (bool_literal))
    (fun_expression
        (positional_params (pin_pattern) (pin_pattern) (pin_pattern))
        body: (bool_literal)))

===
pat.tuple
===
if (a, b)       ?= test then true end;
if (...a)       ?= test then true end;
if (...)        ?= test then true end;
if (a, ...b)    ?= test then true end;
if (a, (b, c))  ?= test then true end;
if (a, (^b, c)) ?= test then true end
---
(chunk
    (if_expression
        cond: (test_expression
            L: (tuple_pattern (identifier) (identifier))
            R: (identifier))
        then: (bool_literal))

    (if_expression
        cond: (test_expression
            L: (tuple_pattern (gather_pattern (identifier)))
            R: (identifier))
        then: (bool_literal))

    (if_expression
        cond: (test_expression
            L: (tuple_pattern (gather_pattern))
            R: (identifier))
        then: (bool_literal))

    (if_expression
        cond: (test_expression
            L: (tuple_pattern (identifier) (gather_pattern (identifier)))
            R: (identifier))
        then: (bool_literal))
        
    (if_expression
        cond: (test_expression
            L: (tuple_pattern (identifier) (tuple_pattern (identifier) (identifier)))
            R: (identifier))
        then: (bool_literal))
        
    (if_expression
        cond: (test_expression
            L: (tuple_pattern (identifier) (tuple_pattern (pin_pattern) (identifier)))
            R: (identifier))
        then: (bool_literal)))
===
pat.record
===
if {a, b} ?= test then
    true
end;

if {a=x, b=y} ?= {a=0, b=1} then
    x + y
end
---
(chunk
    (if_expression
        cond: (test_expression
            L: (record_pattern
                (key_pattern (identifier))
                (key_pattern (identifier)))
            R: (identifier))
        then: (bool_literal))
    (if_expression
        cond: (test_expression
            L: (record_pattern
                (pair_pattern (identifier) (identifier))
                (pair_pattern (identifier) (identifier)))
            R: (record_literal
                (pair (identifier) (int_literal))
                (pair (identifier) (int_literal))))
        then: (add_expression
            L: (identifier)
            R: (identifier))))