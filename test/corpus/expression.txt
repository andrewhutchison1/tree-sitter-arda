===
expr.ident
===
hello;
_a000;
_0_;
---
(chunk
    (identifier)
    (identifier)
    (identifier))

===
expr.binop
===
a+b; a+b+c;
a-b;
a*b;
a/b;
a%b;
a**b;
a**b**c;
a and b; a and b and c;
a or b; a or b or c;
a orelse b; a orelse b orelse c;
a[0]; (a + b)[a+b];
a < b; a > b; a <= b; a >= b; a == b; a != b;
a = b; a = b = c
---
(chunk
    (add_expression (identifier) (identifier))
    (add_expression (add_expression (identifier) (identifier)) (identifier))
    (sub_expression (identifier) (identifier))
    (mul_expression (identifier) (identifier))
    (div_expression (identifier) (identifier))
    (mod_expression (identifier) (identifier))
    (pow_expression (identifier) (identifier))
    (pow_expression (identifier) (pow_expression (identifier) (identifier)))
    (and_expression (identifier) (identifier))
    (and_expression (and_expression (identifier) (identifier)) (identifier))
    (or_expression (identifier) (identifier))
    (or_expression (or_expression (identifier) (identifier)) (identifier))
    (orelse_expression (identifier) (identifier))
    (orelse_expression (orelse_expression (identifier) (identifier)) (identifier))
    (index_expression (identifier) (int_literal))
    (index_expression
        (add_expression (identifier) (identifier))
        (add_expression (identifier) (identifier)))
    (lt_expression (identifier) (identifier))
    (gt_expression (identifier) (identifier))
    (le_expression (identifier) (identifier))
    (ge_expression (identifier) (identifier))
    (eq_expression (identifier) (identifier))
    (ne_expression (identifier) (identifier))
    (assign_expression (identifier) (identifier))
    (assign_expression (identifier) (assign_expression (identifier) (identifier))))

===
expr.binop.prec
===
a + b * c + d;
(a + b) * (c + d);
a - b / c + d % e;
a * b % c;
-a - -b + -(-(c));
a or b and c;
---
(chunk
    (add_expression
        (add_expression
            (identifier)
            (mul_expression (identifier) (identifier)))
        (identifier))
    (mul_expression
        (add_expression (identifier) (identifier))
        (add_expression (identifier) (identifier)))
    (add_expression
        (sub_expression
            (identifier)
            (div_expression
                (identifier)
                (identifier)))
        (mod_expression
            (identifier)
            (identifier)))
    (mod_expression
        (mul_expression (identifier) (identifier))
        (identifier))
    (add_expression
        (sub_expression
            (negate_expression (identifier))
            (negate_expression (identifier)))
        (negate_expression (negate_expression (identifier))))
    (or_expression
        (identifier)
        (and_expression (identifier) (identifier))))

===
expr.unop
===
-a;
not a
---
(chunk
    (negate_expression (identifier))
    (not_expression (identifier)))

===
expr.match
===
(a, b);

if (a, b) ?= (0, 1) then
    false
end
---
(chunk
    (tuple_literal (identifier) (identifier))
    (if_expression
        cond: (match_expression
            L: (tuple_pattern (identifier) (identifier))
            R: (tuple_literal (int_literal) (int_literal)))
        then: (bool_literal)))

===
expr.if
===
if a then b end;
if a + b then false else 4 end;

if (a, b) ?= test then
    true
else
    false
end;

if true then
    1;
    2;
end;

if false then
    ()
else
    1; 2
end
---
(chunk
    (if_expression
        cond: (identifier)
        then: (identifier))

    (if_expression
        cond: (add_expression
            L: (identifier)
            R: (identifier))
        then: (bool_literal)
        else: (int_literal))
        
    (if_expression
        cond: (match_expression
            L: (tuple_pattern (identifier) (identifier))
            R: (identifier))
        then: (bool_literal)
        else: (bool_literal))

    (if_expression
        cond: (bool_literal)
        then: (block (int_literal) (int_literal)))
        
    (if_expression
        cond: (bool_literal)
        then: (nil_literal)
        else: (block (int_literal) (int_literal))))

===
expr.if.init
===
if a := test; a then
    a
end;

if (a, b) := (0, 1); a + b then
    true
end
---
(chunk
    (if_expression
        init: (define_expression L: (identifier) R: (identifier))
        cond: (identifier)
        then: (identifier))
        
    (if_expression
        init: (define_expression
            L: (tuple_pattern (identifier) (identifier))
            R: (tuple_literal (int_literal) (int_literal)))
        cond: (add_expression L: (identifier) R: (identifier))
        then: (bool_literal)))

===
expr.fun
===
fun () true end;

fun (a) true end;

fun (a, (^b, c, 0), ...rest)
    false
end;

fun f(a) 1 end;

fun f(a)
    1;
    2
end;

fun g(a; b)
    1; 2
end;

fun f(a)
    true
end;

fun eq(lhs, rhs, (:s, 0))
    true
end;

fun fcmp(lhs, rhs; eps)
    eps
end
---
(chunk
    (fun_expression
        body: (bool_literal))

    (fun_expression
        (positional_params (identifier))
        body: (bool_literal))
        
    (fun_expression
        (positional_params
            (identifier)
            (tuple_pattern
                (pin_pattern)
                (identifier)
                (int_literal))
            (gather_pattern (identifier)))
        body: (bool_literal))
        
    (fun_expression
        name: (identifier)
        (positional_params (identifier))
        body: (int_literal))
        
    (fun_expression
        name: (identifier)
        (positional_params (identifier))
        body: (block (int_literal) (int_literal)))
        
    (fun_expression
        name: (identifier)
        (positional_params (identifier))
        (keyword_params (key_pattern (identifier)))
        body: (block (int_literal) (int_literal)))
        
    (fun_expression
        name: (identifier)
        (positional_params (identifier))
        body: (bool_literal))

    (fun_expression
        name: (identifier)
        (positional_params
            (identifier)
            (identifier)
            (tuple_pattern (sym_literal) (int_literal)))
        body: (bool_literal))
        
    (fun_expression
        name: (identifier)
        (positional_params (identifier) (identifier))
        (keyword_params (key_pattern (identifier)))
        body: (identifier)))

===
expr.fun.case
===
fun f
    case (a, b) do
        a + b
    end

    _ do false end
end;

fun g
    case (0, 0) => 0
    case (a, 0) => 1
    case (_, b) => -1
    _ => 42
end;

fun h
    case (; a?, b?) => 1
    case (; k, ...ks) => 0
end
---
(chunk
    (fun_expression
        name: (identifier)
        (case_fun
            (positional_params (identifier) (identifier))
            body: (do_expression (add_expression L: (identifier) R: (identifier))))
        (case_else
            body: (do_expression (bool_literal))))
            
    (fun_expression
        name: (identifier)
        (case_fun
            (positional_params (int_literal) (int_literal))
            body: (int_literal))
        (case_fun
            (positional_params (identifier) (int_literal))
            body: (int_literal))
        (case_fun
            (positional_params (ignore_pattern) (identifier))
            body: (negate_expression E: (int_literal)))
        (case_else body: (int_literal)))
        
    (fun_expression
        name: (identifier)
        (case_fun
            (keyword_params
                (key_pattern (opt_pattern (identifier)))
                (key_pattern (opt_pattern (identifier))))
            body: (int_literal))
        (case_fun
            (keyword_params
                (key_pattern (identifier))
                (gather_pattern (identifier)))
            body: (int_literal))))

===
expr.switch
===
switch
    case 0 do x end
    case 1 => y
    case i := 0; not a => i
    _ do 0 end
end;

switch e
    case 0 do y end
    _ => false
end;

switch a := true; not a
    case 0 do z end
end
---
(chunk
    (switch_expression
        (case_test
            cond: (int_literal)
            body: (do_expression (identifier)))
        (case_test
            cond: (int_literal)
            body: (identifier))
        (case_test
            init: (define_expression L: (identifier) R: (int_literal))
            cond: (not_expression E: (identifier))
            body: (identifier))
        (case_else
            body: (do_expression (int_literal))))

    (switch_expression
        cond: (identifier)

        (case_match
            P: (int_literal)
            body: (do_expression (identifier)))
        (case_else
            body: (bool_literal)))

    (switch_expression
        init: (define_expression L: (identifier) R: (bool_literal))
        cond: (not_expression E: (identifier))

        (case_match
            P: (int_literal)
            body: (do_expression (identifier)))))

===
expr.do
===
do 1 end;
do
    1;
    2;
    3
end
---
(chunk
    (do_expression (int_literal))
    (do_expression (int_literal) (int_literal) (int_literal)))

===
expr.receive
===
receive
    case 0 => 1
    case 1 do 2 end
    after 1000 => 3
end
---
(chunk
    (receive_expression
        (case_match
            P: (int_literal)
            body: (int_literal))
        (case_match
            P: (int_literal)
            body: (do_expression (int_literal)))
        (case_after
            E: (int_literal)
            body: (int_literal))))

===
expr.while
===
while true do () end;

while i := 0; i do () end;

while i := a[0]; not a do
    ()
else
    1
end;

while true do
    expr;
end;
---
(chunk
    (while_expression
        cond: (bool_literal)
        body: (nil_literal))
    (while_expression
        init: (define_expression L: (identifier) R: (int_literal))
        cond: (identifier)
        body: (nil_literal))
    (while_expression
        init: (define_expression
            L: (identifier)
            R: (index_expression L: (identifier) R: (int_literal)))
        cond: (not_expression E: (identifier))
        body: (nil_literal)
        else: (int_literal))
    (while_expression
        cond: (bool_literal)
        body: (block (identifier))))

===
expr.call
===
f();
()();
f(a);
f(a; b=3);
f(; b=4)
---
(chunk
    (call_expression (identifier))
    (call_expression (nil_literal))
    (call_expression (identifier)
        (positional_args (identifier)))
    (call_expression (identifier)
        (positional_args (identifier))
        (keyword_args (pair (identifier) (int_literal))))
    (call_expression (identifier)
        (keyword_args (pair (identifier) (int_literal)))))