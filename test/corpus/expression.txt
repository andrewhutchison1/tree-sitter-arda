===
expr.ident
===
hello;
_;
_a000;
_0_;
---
(chunk
    (identifier)
    (identifier)
    (identifier)
    (identifier))

===
expr.binop
===
a+b; a+b+c;
a-b;
a*b;
a/b;
a%b;
a**b;
a**b**c;
---
(chunk
    (add_expression (identifier) (identifier))
    (add_expression (add_expression (identifier) (identifier)) (identifier))
    (sub_expression (identifier) (identifier))
    (mul_expression (identifier) (identifier))
    (div_expression (identifier) (identifier))
    (mod_expression (identifier) (identifier))
    (pow_expression (identifier) (identifier))
    (pow_expression (identifier) (pow_expression (identifier) (identifier))))

===
expr.binop.prec
===
a + b * c + d;
(a + b) * (c + d);
a - b / c + d % e;
a * b % c;
-a - -b + -(-(c));
---
(chunk
    (add_expression
        (add_expression
            (identifier)
            (mul_expression (identifier) (identifier)))
        (identifier))
    (mul_expression
        (add_expression (identifier) (identifier))
        (add_expression (identifier) (identifier)))
    (add_expression
        (sub_expression
            (identifier)
            (div_expression
                (identifier)
                (identifier)))
        (mod_expression
            (identifier)
            (identifier)))
    (mod_expression
        (mul_expression (identifier) (identifier))
        (identifier))
    (add_expression
        (sub_expression
            (negate_expression (identifier))
            (negate_expression (identifier)))
        (negate_expression (negate_expression (identifier)))))

===
expr.match
===
(a, b);
(a, b) ?= (0, 1)
---
(chunk
    (tuple_literal (identifier) (identifier))
    (match_expression
        (tuple_pattern (identifier) (identifier))
        (tuple_literal (int_literal) (int_literal))))

===
expr.if
===
if a then b end;
if a + b then false else 4 end;
---
(chunk
    (if_expression
        condition:      (identifier)
        branch_then:    (identifier))
    (if_expression
        condition:      (add_expression
            left:   (identifier)
            right:  (identifier))
        branch_then:    (bool_literal)
        branch_else:    (int_literal)))