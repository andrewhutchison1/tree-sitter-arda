===
expr.ident
===
hello;
_;
_a000;
_0_;
---
(chunk
    (identifier)
    (identifier)
    (identifier)
    (identifier))

===
expr.binop
===
a+b; a+b+c;
a-b;
a*b;
a/b;
a%b;
a**b;
a**b**c;
a orelse b; a orelse b orelse c
---
(chunk
    (add_expression (identifier) (identifier))
    (add_expression (add_expression (identifier) (identifier)) (identifier))
    (sub_expression (identifier) (identifier))
    (mul_expression (identifier) (identifier))
    (div_expression (identifier) (identifier))
    (mod_expression (identifier) (identifier))
    (pow_expression (identifier) (identifier))
    (pow_expression (identifier) (pow_expression (identifier) (identifier)))
    (orelse_expression (identifier) (identifier))
    (orelse_expression (orelse_expression (identifier) (identifier)) (identifier)))

===
expr.binop.prec
===
a + b * c + d;
(a + b) * (c + d);
a - b / c + d % e;
a * b % c;
-a - -b + -(-(c));
---
(chunk
    (add_expression
        (add_expression
            (identifier)
            (mul_expression (identifier) (identifier)))
        (identifier))
    (mul_expression
        (add_expression (identifier) (identifier))
        (add_expression (identifier) (identifier)))
    (add_expression
        (sub_expression
            (identifier)
            (div_expression
                (identifier)
                (identifier)))
        (mod_expression
            (identifier)
            (identifier)))
    (mod_expression
        (mul_expression (identifier) (identifier))
        (identifier))
    (add_expression
        (sub_expression
            (negate_expression (identifier))
            (negate_expression (identifier)))
        (negate_expression (negate_expression (identifier)))))

===
expr.match
===
(a, b);
(a, b) ?= (0, 1)
---
(chunk
    (tuple_literal (identifier) (identifier))
    (match_expression
        (tuple_pattern (identifier) (identifier))
        (tuple_literal (int_literal) (int_literal))))

===
expr.if
===
if a then b end;
if a + b then false else 4 end;

if (a, b) ?= test then
    true
else
    false
end;

if true then
    1;
    2;
end;

if false then
    ()
else
    1; 2
end
---
(chunk
    (if_expression
        cond: (identifier)
        then: (identifier))

    (if_expression
        cond: (add_expression
            L: (identifier)
            R: (identifier))
        then: (bool_literal)
        else: (int_literal))
        
    (if_expression
        cond: (match_expression
            L: (tuple_pattern (identifier) (identifier))
            R: (identifier))
        then: (bool_literal)
        else: (bool_literal))

    (if_expression
        cond: (bool_literal)
        then: (block (int_literal) (int_literal)))
        
    (if_expression
        cond: (bool_literal)
        then: (nil_literal)
        else: (block (int_literal) (int_literal))))

===
expr.fun
===
fun () true end;

fun (a) true end;

fun (a, (^b, c, 0), ...rest)
    false
end;

fun f(a) 1 end;

fun f(a)
    1;
    2
end;

fun g(a; b)
    1; 2
end;

fun f(a?)
    true
end;

fun eq(lhs, rhs, (:s, 0)?)
    true
end;

fun fcmp(lhs, rhs; eps?)
    eps
end
---
(chunk
    (fun_expression
        body: (bool_literal))

    (fun_expression
        (positional_params (identifier))
        body: (bool_literal))
        
    (fun_expression
        (positional_params
            (identifier)
            (tuple_pattern
                (pin_pattern)
                (identifier)
                (int_literal))
            (gather_pattern (identifier)))
        body: (bool_literal))
        
    (fun_expression
        name: (identifier)
        (positional_params (identifier))
        body: (int_literal))
        
    (fun_expression
        name: (identifier)
        (positional_params (identifier))
        body: (block (int_literal) (int_literal)))
        
    (fun_expression
        name: (identifier)
        (positional_params (identifier))
        (keyword_params (key_pattern (identifier)))
        body: (block (int_literal) (int_literal)))
        
    (fun_expression
        name: (identifier)
        (positional_params (opt_pattern (identifier)))
        body: (bool_literal))

    (fun_expression
        name: (identifier)
        (positional_params
            (identifier)
            (identifier)
            (opt_pattern (tuple_pattern (sym_literal) (int_literal))))
        body: (bool_literal))
        
    (fun_expression
        name: (identifier)
        (positional_params (identifier) (identifier))
        (keyword_params (key_pattern (opt_pattern (identifier))))
        body: (identifier)))
